import tensorflow as tf
from util import define_scope

class dRNN:

    def __init__(self, data, target):
        self.data = data
        self.target = target
        self.hidden_size = 64
        self._prediction = None
        self._optimize = None
        self._error = None

    @define_scope
    def prediction(self):
        data_size = int(self.data.get_shape()[1])
        num_features = int(self.data.get_shape()[2])

        x = tf.unstack(self.data, data_size, 1)

        w = tf.Variable(tf.random_uniform([self.hidden_size,
                                           num_features]))
        b = tf.Variable(tf.random_uniform([num_features]))

        cell = tf.contrib.rnn.BasicLSTMCell(self.hidden_size)

        outputs, states = tf.contrib.rnn.static_rnn(cell, x, dtype=tf.float32,
                                                    sequence_length=data_size)

        outputs = tf.stack(outputs)
        outputs = tf.transpose(outputs, [1,0,2])

        outputs = tf.reshape(outputs, [-1, self.hidden_size])

        return tf.nn.xw_plus_b(outputs, w, b)
